name: Build VSCode extension

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

jobs:
  checksecret:
    name: check if SONAR_TOKEN is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_SONAR_TOKEN_set: ${{ steps.checksecret_job.outputs.is_SONAR_TOKEN_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checksecret_job
        run: |
          echo "is_SONAR_TOKEN_set=${{ env.SONAR_TOKEN != '' }}" >> $GITHUB_OUTPUT
  build:
    needs: [checksecret]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        builds:
          - name: "VS Code Extension"
            path: "microsoft-kiota"
            id: "vscode"
            item: "vsix"
          - name: "Npm Package"
            path: "npm-package"
            id: "package"
            item: "tgz"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - id: last_release
        run: |
          $releaseVersion = gh release list --exclude-drafts --exclude-pre-releases --json tagName,isLatest | ConvertFrom-Json | ? {$_.isLatest -eq $true} | select -first 1 -ExpandProperty tagName
          Write-Output "RELEASE_VERSION=$releaseVersion" >> $Env:GITHUB_OUTPUT
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: scripts/update-vscode-releases.ps1 -version "${{ steps.last_release.outputs.RELEASE_VERSION }}" -packageJsonFilePath "./vscode/microsoft-kiota/package.json" -runtimeFilePath "./vscode/npm-package/runtime.json" -online
        shell: pwsh

      - name: Install dependencies
        run: npm install
        working-directory: vscode

      - name: Lint
        run: npm run lint
        working-directory: vscode/${{ matrix.builds.path }}

      - name: run tests(linux) - package
        if: runner.os == 'Linux' && matrix.builds.id == 'package'
        run: xvfb-run -a npm run test:coverage
        working-directory: vscode/${{ matrix.builds.path }}

      - name: run tests - package
        if: runner.os != 'Linux' && matrix.builds.id == 'package'
        run: npm run test:coverage
        working-directory: vscode/${{ matrix.builds.path }}

      - name: run tests(linux) - vscode
        if: runner.os == 'Linux' && matrix.builds.id == 'vscode'
        run: |
          cd npm-package
          npm install
          npm run package

          cd ..
          npm install

          cd microsoft-kiota
          tgz_file=$(ls ../npm-package/*.tgz)
          npm install $tgz_file
          xvfb-run -a npm run test:coverage
        working-directory: vscode

      - name: run tests - vscode
        if: runner.os != 'Linux' && matrix.builds.id == 'vscode'
        run: |
          cd npm-package
          npm install
          npm run package

          cd ..
          npm install

          cd microsoft-kiota
          tgz_file=$(ls ../npm-package/*.tgz)
          npm install $tgz_file
          npm run test:coverage
        working-directory: vscode/${{ matrix.builds.path }}

              
      - name: Run sonar cloud analysis
        if: needs.checksecret.outputs.is_SONAR_TOKEN_set == 'true'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: vscode
          args: >
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info,../npm-package/coverage/lcov.info

      - run: npm run package
        if: matrix.builds.id == 'package'
        working-directory: vscode/${{ matrix.builds.path }}

      # applies specifically to vscode 
      - run: |
          npm i -g @vscode/vsce

          cd npm-package
          npm install
          npm run package

          cd ..
          cd microsoft-kiota
          npm install --no-audit --no-fund --legacy-peer-deps
          tgz_file=$(ls ../npm-package/*.tgz)
          npm install $tgz_file

          vsce package
          vsce ls --tree
        working-directory: vscode
        name: 'Package VSCode extension'
        if: matrix.builds.id == 'vscode'

        # back to common operations

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.builds.name }}
          path: vscode/${{ matrix.builds.path }}/*.${{ matrix.builds.item }}
