@page "/generate"
@using Kiota.Builder
@using Kiota.Builder.Configuration
@using System.Linq
@using System.IO
@using System.IO.Compression
@using System.Security.Cryptography
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Threading
@using Kiota.Web.Components
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.Kiota.Abstractions.Authentication;
@inject HttpClient Http
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JSRuntime
@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Generate> Loc


<PageTitle>@Loc["PageTitle"]</PageTitle>

<SdkGenerator IncludeAdditionalData="@AdditionalData"
              UsesBackingStore="@BackingStore"
              DescriptionUrl="@DescriptionUrl"
              IncludePatterns="@IncludePatterns"
              ExcludePatterns="@ExcludePatterns"
              Language="@Language"
              Serializers="@SerializersFromQuery"
              Deserializers="@DeserializersFromQuery"
              ClientClassName="@ClientClassName"
              StructuredMimeTypes="@StructuredMimeTypesFromQuery" />

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "k")]
    public string? SearchTermFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "v")]
    public string? VersionFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "c")]
    public string? ClientClassNameFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "n")]
    public string? NamespaceNameFromQuery { get; set; }
    private string? ClientClassName { get; set; }
    private string? NamespaceName { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "b")]
    public string? BackingStoreFromQuery { get; set; }
    private bool BackingStore { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ad")]
    public string? AdditionalDataFromQuery { get; set; }
    private bool AdditionalData { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "d")]
    public string? DescriptionUrlFromQuery { get; set; }
    private string? DescriptionUrl { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "i")]
    public string? IncludePatternsFromQuery { get; set; }
    private string? IncludePatterns { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "e")]
    public string? ExcludePatternsFromQuery { get; set; }
    private string? ExcludePatterns { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "l")]
    public string? LanguageFromQuery { get; set; }
    private GenerationLanguage? Language { get; set; }
    private string? OutputPath { get; set; }
    private string? DownloadUrl { get; set; }
    private bool IsLoading { get; set; }
    private string? Dependencies { get; set; }
    private string? Logs { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "s")]
    public string? SerializersFromQuery { get; set; }
    private HashSet<string> Serializers { get; set; } = new(StringComparer.OrdinalIgnoreCase);
    [Parameter]
    [SupplyParameterFromQuery(Name = "ds")]
    public string? DeserializersFromQuery { get; set; }
    private HashSet<string> Deserializers { get; set; } = new(StringComparer.OrdinalIgnoreCase);
    [Parameter]
    [SupplyParameterFromQuery(Name = "m")]
    public string? StructuredMimeTypesFromQuery { get; set; }
    private HashSet<string> StructuredMimeTypes { get; set; } = new(StringComparer.OrdinalIgnoreCase);
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(DescriptionUrlFromQuery))
            DescriptionUrl = DescriptionUrlFromQuery;
        if (!string.IsNullOrEmpty(IncludePatternsFromQuery))
            IncludePatterns = string.Join(Environment.NewLine, IncludePatternsFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries));
        if (!string.IsNullOrEmpty(ExcludePatternsFromQuery))
            ExcludePatterns = string.Join(Environment.NewLine, ExcludePatternsFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries));

        var defaultConfiguration = new GenerationConfiguration();

        if (!string.IsNullOrEmpty(AdditionalDataFromQuery) && bool.TryParse(AdditionalDataFromQuery, out var additionalData))
            AdditionalData = additionalData;
        else
            AdditionalData = defaultConfiguration.IncludeAdditionalData;

        if (!string.IsNullOrEmpty(BackingStoreFromQuery) && bool.TryParse(BackingStoreFromQuery, out var backingStore))
            BackingStore = backingStore;
        else
            BackingStore = defaultConfiguration.UsesBackingStore;

        if (!string.IsNullOrEmpty(ClientClassNameFromQuery))
            ClientClassName = ClientClassNameFromQuery;
        else
            ClientClassName = defaultConfiguration.ClientClassName;

        if (!string.IsNullOrEmpty(NamespaceNameFromQuery))
            NamespaceName = NamespaceNameFromQuery;
        else
            NamespaceName = defaultConfiguration.ClientNamespaceName;

        if (!string.IsNullOrEmpty(LanguageFromQuery) && Enum.TryParse<GenerationLanguage>(LanguageFromQuery, true, out var language))
            Language = language;
        else
            Language = defaultConfiguration.Language;

        if (!string.IsNullOrEmpty(SerializersFromQuery))
            Serializers = new HashSet<string>(SerializersFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries), StringComparer.OrdinalIgnoreCase);
        else
            Serializers = defaultConfiguration.Serializers;

        if (!string.IsNullOrEmpty(DeserializersFromQuery))
            Deserializers = new HashSet<string>(DeserializersFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries), StringComparer.OrdinalIgnoreCase);
        else
            Deserializers = defaultConfiguration.Deserializers;

        if (!string.IsNullOrEmpty(StructuredMimeTypesFromQuery))
            StructuredMimeTypes = new HashSet<string>(StructuredMimeTypesFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries), StringComparer.OrdinalIgnoreCase);
        else
            StructuredMimeTypes = defaultConfiguration.StructuredMimeTypes;

        await GetConfiguration(ComponentDetached);
        var SearchTerm = string.IsNullOrEmpty(SearchTermFromQuery) ? string.Empty : SearchTermFromQuery;
        var Version = string.IsNullOrEmpty(VersionFromQuery) ? string.Empty : VersionFromQuery;
        if (!string.IsNullOrEmpty(SearchTerm) && !string.IsNullOrEmpty(Version) && string.IsNullOrEmpty(DescriptionUrl) && KiotaSearcher != null)
        {
            var searchResults = await KiotaSearcher.SearchAsync(SearchTerm, Version, ComponentDetached);
            if (searchResults.Any())
                DescriptionUrl = searchResults.Values.First().DescriptionUrl?.ToString();
        }
        await base.OnParametersSetAsync();
    }
    [Inject] private KiotaSearcher? KiotaSearcher { get; set; }
    private static readonly ThreadLocal<HashAlgorithm> HashAlgorithm = new(() => SHA256.Create());
    [Inject] private IApplicationInsights? AppInsights { get; set; }

 
    private static KiotaConfiguration? configuration;
    private async Task<KiotaConfiguration?> GetConfiguration(CancellationToken cancellationToken)
    {
        if (configuration == null)
            configuration = await Http.GetFromJsonAsync<KiotaConfiguration>(
                "appsettings.json",
                new JsonSerializerOptions
                    {
                        Converters ={
                        new JsonStringEnumConverter( JsonNamingPolicy.CamelCase)
                        },

                    },
                cancellationToken);

        return configuration;
    }
}
