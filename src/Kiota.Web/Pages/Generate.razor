@page "/generate"
@using Kiota.Builder
@using Kiota.Web.Components
@using Microsoft.Extensions.Localization
@using System.Linq
@using System.Globalization

@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SdkGenTranslator> Loc
@inject KiotaSearcher? KiotaSearcher

<PageTitle>@Loc["PageTitle"]</PageTitle>

<SdkGenerator AdditionalData="@AdditionalDataFromQuery"
              BackingStore="@BackingStoreFromQuery"
              DescriptionUrl="@DescriptionUrl"
              NamespaceName="@NamespaceNameFromQuery"
              IncludePatterns="@IncludePatternsFromQuery"
              ExcludePatterns="@ExcludePatternsFromQuery"
              Language="@LanguageFromQuery"
              Serializers="@SerializersFromQuery"
              Deserializers="@DeserializersFromQuery"
              ClientClassName="@ClientClassNameFromQuery"
              StructuredMimeTypes="@StructuredMimeTypesFromQuery" />

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "k")]
    public string? SearchTermFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "v")]
    public string? VersionFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "c")]
    public string? ClientClassNameFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "n")]
    public string? NamespaceNameFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "b")]
    public string? BackingStoreFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ad")]
    public string? AdditionalDataFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "d")]
    public string? DescriptionUrlFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "i")]
    public string? IncludePatternsFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "e")]
    public string? ExcludePatternsFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "l")]
    public string? LanguageFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "s")]
    public string? SerializersFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ds")]
    public string? DeserializersFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "m")]
    public string? StructuredMimeTypesFromQuery { get; set; }

    private string? DescriptionUrl { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(DescriptionUrlFromQuery))
            DescriptionUrl = DescriptionUrlFromQuery;

        var SearchTerm = string.IsNullOrEmpty(SearchTermFromQuery) ? string.Empty : SearchTermFromQuery;
        var Version = string.IsNullOrEmpty(VersionFromQuery) ? string.Empty : VersionFromQuery;
        if (!string.IsNullOrEmpty(SearchTerm) && !string.IsNullOrEmpty(Version) && string.IsNullOrEmpty(DescriptionUrl) && KiotaSearcher != null)
        {
            var searchResults = await KiotaSearcher.SearchAsync(SearchTerm, Version, ComponentDetached);
            if (searchResults.Any())
                DescriptionUrl = searchResults.Values.First().DescriptionUrl?.ToString();
        }
        await base.OnParametersSetAsync();
    }
}
