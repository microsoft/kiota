// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models
{
    /// <summary>
    /// The permissions granted to the user access token.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class AppPermissions : IAdditionalDataHolder, IParsable
    {
        /// <summary>The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_actions? Actions { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_administration? Administration { get; set; }
        /// <summary>The level of permission to grant the access token for checks on code.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_checks? Checks { get; set; }
        /// <summary>The level of permission to grant the access token to create, edit, delete, and list Codespaces.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_codespaces? Codespaces { get; set; }
        /// <summary>The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_contents? Contents { get; set; }
        /// <summary>The leve of permission to grant the access token to manage Dependabot secrets.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_dependabot_secrets? DependabotSecrets { get; set; }
        /// <summary>The level of permission to grant the access token for deployments and deployment statuses.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_deployments? Deployments { get; set; }
        /// <summary>The level of permission to grant the access token to manage the email addresses belonging to a user.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_email_addresses? EmailAddresses { get; set; }
        /// <summary>The level of permission to grant the access token for managing repository environments.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_environments? Environments { get; set; }
        /// <summary>The level of permission to grant the access token to manage the followers belonging to a user.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_followers? Followers { get; set; }
        /// <summary>The level of permission to grant the access token to manage git SSH keys.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_git_ssh_keys? GitSshKeys { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage GPG keys belonging to a user.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_gpg_keys? GpgKeys { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage interaction limits on a repository.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_interaction_limits? InteractionLimits { get; set; }
        /// <summary>The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_issues? Issues { get; set; }
        /// <summary>The level of permission to grant the access token for organization teams and members.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_members? Members { get; set; }
        /// <summary>The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_metadata? Metadata { get; set; }
        /// <summary>The level of permission to grant the access token to manage access to an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_administration? OrganizationAdministration { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage announcement banners for an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_announcement_banners? OrganizationAnnouncementBanners { get; set; }
        /// <summary>The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_copilot_seat_management? OrganizationCopilotSeatManagement { get; set; }
        /// <summary>The level of permission to grant the access token for custom organization roles management.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_org_roles? OrganizationCustomOrgRoles { get; set; }
        /// <summary>The level of permission to grant the access token for custom property management.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_properties? OrganizationCustomProperties { get; set; }
        /// <summary>The level of permission to grant the access token for custom repository roles management.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_roles? OrganizationCustomRoles { get; set; }
        /// <summary>The level of permission to grant the access token to view events triggered by an activity in an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_events? OrganizationEvents { get; set; }
        /// <summary>The level of permission to grant the access token to manage the post-receive hooks for an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_hooks? OrganizationHooks { get; set; }
        /// <summary>The level of permission to grant the access token for organization packages published to GitHub Packages.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_packages? OrganizationPackages { get; set; }
        /// <summary>The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_personal_access_token_requests? OrganizationPersonalAccessTokenRequests { get; set; }
        /// <summary>The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_personal_access_tokens? OrganizationPersonalAccessTokens { get; set; }
        /// <summary>The level of permission to grant the access token for viewing an organization&apos;s plan.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_plan? OrganizationPlan { get; set; }
        /// <summary>The level of permission to grant the access token to manage organization projects and projects beta (where available).</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_projects? OrganizationProjects { get; set; }
        /// <summary>The level of permission to grant the access token to manage organization secrets.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_secrets? OrganizationSecrets { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_self_hosted_runners? OrganizationSelfHostedRunners { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage users blocked by the organization.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_user_blocking? OrganizationUserBlocking { get; set; }
        /// <summary>The level of permission to grant the access token for packages published to GitHub Packages.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_packages? Packages { get; set; }
        /// <summary>The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_pages? Pages { get; set; }
        /// <summary>The level of permission to grant the access token to manage the profile settings belonging to a user.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_profile? Profile { get; set; }
        /// <summary>The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_pull_requests? PullRequests { get; set; }
        /// <summary>The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_custom_properties? RepositoryCustomProperties { get; set; }
        /// <summary>The level of permission to grant the access token to manage the post-receive hooks for a repository.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_hooks? RepositoryHooks { get; set; }
        /// <summary>The level of permission to grant the access token to manage repository projects, columns, and cards.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_projects? RepositoryProjects { get; set; }
        /// <summary>The level of permission to grant the access token to manage repository secrets.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_secrets? Secrets { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage secret scanning alerts.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_secret_scanning_alerts? SecretScanningAlerts { get; set; }
        /// <summary>The level of permission to grant the access token to view and manage security events like code scanning alerts.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_security_events? SecurityEvents { get; set; }
        /// <summary>The level of permission to grant the access token to manage just a single file.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_single_file? SingleFile { get; set; }
        /// <summary>The level of permission to grant the access token to list and manage repositories a user is starring.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_starring? Starring { get; set; }
        /// <summary>The level of permission to grant the access token for commit statuses.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_statuses? Statuses { get; set; }
        /// <summary>The level of permission to grant the access token to manage team discussions and related comments.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_team_discussions? TeamDiscussions { get; set; }
        /// <summary>The level of permission to grant the access token to manage Dependabot alerts.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_vulnerability_alerts? VulnerabilityAlerts { get; set; }
        /// <summary>The level of permission to grant the access token to update GitHub Actions workflow files.</summary>
        public global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_workflows? Workflows { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions"/> and sets the default values.
        /// </summary>
        public AppPermissions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actions", n => { Actions = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_actions>(); } },
                { "administration", n => { Administration = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_administration>(); } },
                { "checks", n => { Checks = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_checks>(); } },
                { "codespaces", n => { Codespaces = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_codespaces>(); } },
                { "contents", n => { Contents = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_contents>(); } },
                { "dependabot_secrets", n => { DependabotSecrets = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_dependabot_secrets>(); } },
                { "deployments", n => { Deployments = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_deployments>(); } },
                { "email_addresses", n => { EmailAddresses = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_email_addresses>(); } },
                { "environments", n => { Environments = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_environments>(); } },
                { "followers", n => { Followers = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_followers>(); } },
                { "git_ssh_keys", n => { GitSshKeys = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_git_ssh_keys>(); } },
                { "gpg_keys", n => { GpgKeys = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_gpg_keys>(); } },
                { "interaction_limits", n => { InteractionLimits = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_interaction_limits>(); } },
                { "issues", n => { Issues = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_issues>(); } },
                { "members", n => { Members = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_members>(); } },
                { "metadata", n => { Metadata = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_metadata>(); } },
                { "organization_administration", n => { OrganizationAdministration = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_administration>(); } },
                { "organization_announcement_banners", n => { OrganizationAnnouncementBanners = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_announcement_banners>(); } },
                { "organization_copilot_seat_management", n => { OrganizationCopilotSeatManagement = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_copilot_seat_management>(); } },
                { "organization_custom_org_roles", n => { OrganizationCustomOrgRoles = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_org_roles>(); } },
                { "organization_custom_properties", n => { OrganizationCustomProperties = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_properties>(); } },
                { "organization_custom_roles", n => { OrganizationCustomRoles = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_roles>(); } },
                { "organization_events", n => { OrganizationEvents = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_events>(); } },
                { "organization_hooks", n => { OrganizationHooks = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_hooks>(); } },
                { "organization_packages", n => { OrganizationPackages = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_packages>(); } },
                { "organization_personal_access_token_requests", n => { OrganizationPersonalAccessTokenRequests = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_personal_access_token_requests>(); } },
                { "organization_personal_access_tokens", n => { OrganizationPersonalAccessTokens = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_personal_access_tokens>(); } },
                { "organization_plan", n => { OrganizationPlan = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_plan>(); } },
                { "organization_projects", n => { OrganizationProjects = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_projects>(); } },
                { "organization_secrets", n => { OrganizationSecrets = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_secrets>(); } },
                { "organization_self_hosted_runners", n => { OrganizationSelfHostedRunners = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_self_hosted_runners>(); } },
                { "organization_user_blocking", n => { OrganizationUserBlocking = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_user_blocking>(); } },
                { "packages", n => { Packages = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_packages>(); } },
                { "pages", n => { Pages = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_pages>(); } },
                { "profile", n => { Profile = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_profile>(); } },
                { "pull_requests", n => { PullRequests = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_pull_requests>(); } },
                { "repository_custom_properties", n => { RepositoryCustomProperties = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_custom_properties>(); } },
                { "repository_hooks", n => { RepositoryHooks = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_hooks>(); } },
                { "repository_projects", n => { RepositoryProjects = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_projects>(); } },
                { "secret_scanning_alerts", n => { SecretScanningAlerts = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_secret_scanning_alerts>(); } },
                { "secrets", n => { Secrets = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_secrets>(); } },
                { "security_events", n => { SecurityEvents = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_security_events>(); } },
                { "single_file", n => { SingleFile = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_single_file>(); } },
                { "starring", n => { Starring = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_starring>(); } },
                { "statuses", n => { Statuses = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_statuses>(); } },
                { "team_discussions", n => { TeamDiscussions = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_team_discussions>(); } },
                { "vulnerability_alerts", n => { VulnerabilityAlerts = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_vulnerability_alerts>(); } },
                { "workflows", n => { Workflows = n.GetEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_workflows>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_actions>("actions", Actions);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_administration>("administration", Administration);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_checks>("checks", Checks);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_codespaces>("codespaces", Codespaces);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_contents>("contents", Contents);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_dependabot_secrets>("dependabot_secrets", DependabotSecrets);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_deployments>("deployments", Deployments);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_email_addresses>("email_addresses", EmailAddresses);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_environments>("environments", Environments);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_followers>("followers", Followers);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_git_ssh_keys>("git_ssh_keys", GitSshKeys);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_gpg_keys>("gpg_keys", GpgKeys);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_interaction_limits>("interaction_limits", InteractionLimits);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_issues>("issues", Issues);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_members>("members", Members);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_administration>("organization_administration", OrganizationAdministration);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_announcement_banners>("organization_announcement_banners", OrganizationAnnouncementBanners);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_copilot_seat_management>("organization_copilot_seat_management", OrganizationCopilotSeatManagement);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_org_roles>("organization_custom_org_roles", OrganizationCustomOrgRoles);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_properties>("organization_custom_properties", OrganizationCustomProperties);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_custom_roles>("organization_custom_roles", OrganizationCustomRoles);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_events>("organization_events", OrganizationEvents);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_hooks>("organization_hooks", OrganizationHooks);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_packages>("organization_packages", OrganizationPackages);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_personal_access_token_requests>("organization_personal_access_token_requests", OrganizationPersonalAccessTokenRequests);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_personal_access_tokens>("organization_personal_access_tokens", OrganizationPersonalAccessTokens);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_plan>("organization_plan", OrganizationPlan);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_projects>("organization_projects", OrganizationProjects);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_secrets>("organization_secrets", OrganizationSecrets);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_self_hosted_runners>("organization_self_hosted_runners", OrganizationSelfHostedRunners);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_organization_user_blocking>("organization_user_blocking", OrganizationUserBlocking);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_packages>("packages", Packages);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_pages>("pages", Pages);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_profile>("profile", Profile);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_pull_requests>("pull_requests", PullRequests);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_custom_properties>("repository_custom_properties", RepositoryCustomProperties);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_hooks>("repository_hooks", RepositoryHooks);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_repository_projects>("repository_projects", RepositoryProjects);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_secrets>("secrets", Secrets);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_secret_scanning_alerts>("secret_scanning_alerts", SecretScanningAlerts);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_security_events>("security_events", SecurityEvents);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_single_file>("single_file", SingleFile);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_starring>("starring", Starring);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_statuses>("statuses", Statuses);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_team_discussions>("team_discussions", TeamDiscussions);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_vulnerability_alerts>("vulnerability_alerts", VulnerabilityAlerts);
            writer.WriteEnumValue<global::Kiota.Builder.SearchProviders.GitHub.GitHubClient.Models.AppPermissions_workflows>("workflows", Workflows);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
