using System;
using System.Globalization;
using System.Linq;

using Kiota.Builder.CodeDOM;
using Kiota.Builder.Extensions;

namespace Kiota.Builder.Writers.AL;
public class CodeEnumWriter : BaseElementWriter<CodeEnum, ALConventionService>
{
    public static string AutoGenerationHeader => "// <auto-generated/>";
    public CodeEnumWriter(ALConventionService conventionService) : base(conventionService) { }
    public override void WriteCodeElement(CodeEnum codeElement, LanguageWriter writer)
    {
        var alWriter = writer as ALWriter;
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        ArgumentNullException.ThrowIfNull(alWriter);
        if (codeElement.ParentIsSkipped()) return;
        if (!codeElement.Options.Any())
            return;

        var codeNamespace = codeElement.Parent as CodeNamespace;
        if (codeNamespace != null)
        {
            alWriter.WriteLine(AutoGenerationHeader);
            foreach (var x in codeElement.Usings
                    .Where(static x => x.Declaration?.IsExternal ?? true)
                    .Select(static x => $"using {(x.Declaration?.Name ?? x.Name).NormalizeNameSpaceName(".")};")
                    .Distinct(StringComparer.Ordinal)
                    .OrderBy(static x => x, StringComparer.Ordinal))
                alWriter.WriteLine(x);
            alWriter.WriteLine($"namespace {codeNamespace.Name};");
            alWriter.WriteLine();
        }
        bool hasDescription = conventions.WriteShortDescription(codeElement, alWriter);
        // if (codeElement.Flags)
        //     writer.WriteLine("[Flags]");
        conventions.WriteDeprecationAttribute(codeElement, alWriter);
        alWriter.WriteLine($"{conventions.GetAccessModifier(codeElement.Access)}enum {alWriter.ObjectIdProvider.GetNextEnumId()} {codeElement.GetShortName().ToFirstCharacterUpperCase()}");
        alWriter.StartBlock();
        alWriter.WriteObjectProperties(codeElement.ObjectProperties().ToObjectProperties());
        var idx = 0;
        foreach (var option in codeElement.Options.Where(o => !o.IsObjectProperty()))
        {
            hasDescription = conventions.WriteShortDescription(option, alWriter);
            alWriter.WriteLine($"value({idx}; \"{option.Name.ToFirstCharacterUpperCase()}\")");
            alWriter.StartBlock();
            alWriter.WriteLine($"Caption = '{option.WireName}', Locked = true;");
            alWriter.CloseBlock();
            idx++;
        }
    }
}
