using System;
using System.Collections.Generic;

namespace Kiota.Builder.Refiners;
public class CSharpReservedTypesProvider : IReservedNamesProvider
{
    private readonly Lazy<HashSet<string>> _reservedNames = new(static () =>
    {
        return new(StringComparer.OrdinalIgnoreCase) {
            "file", //system.io static types
            "directory",
            "path",
            "environment",
            "task",
            "thread",
            "integer",

            "__ComObject", //system types 
            "AccessViolationException",
            "Action",
            "Activator",
            "AggregateException",
            "AppContext",
            "AppDomain",
            "AppDomainSetup",
            "AppDomainUnloadedException",
            "ApplicationException",
            "ApplicationId",
            "ArgIterator",
            "ArgumentException",
            "ArgumentNullException",
            "ArgumentOutOfRangeException",
            "ArithmeticException",
            "Array",
            "ArrayTypeMismatchException",
            "AssemblyLoadEventArgs",
            "AssemblyLoadEventHandler",
            "AsyncCallback",
            "Attribute",
            "AttributeTargets",
            "AttributeUsageAttribute",
            "BadImageFormatException",
            "Base64FormattingOptions",
            "BitConverter",
            "Boolean",
            "Buffer",
            "Byte",
            "CannotUnloadAppDomainException",
            "Char",
            "CharEnumerator",
            "CLSCompliantAttribute",
            "ContextBoundObject",
            "ContextMarshalException",
            "ContextStaticAttribute",
            "Convert",
            "CultureAwareComparer",
            "DataMisalignedException",
            "DateOnly",
            "DateTime",
            "DateTimeKind",
            "DateTimeOffset",
            "DayOfWeek",
            "DBNull",
            "Decimal",
            "Delegate",
            "DivideByZeroException",
            "DllNotFoundException",
            "Double",
            "DuplicateWaitObjectException",
            "EntryPointNotFoundException",
            "Enum",
            "Environment",
            "EnvironmentVariableTarget",
            "EventArgs",
            "EventHandler",
            "Exception",
            "ExecutionEngineException",
            "FieldAccessException",
            "FlagsAttribute",
            "FormatException",
            "FormattableString",
            "GC",
            "GCCollectionMode",
            "GCGenerationInfo",
            "GCKind",
            "GCMemoryInfo",
            "GCNotificationStatus",
            "Guid",
            "Half",
            "HashCode",
            "IAsyncDisposable",
            "IAsyncResult",
            "ICloneable",
            "IComparable",
            "IConvertible",
            "ICustomFormatter",
            "IDisposable",
            "IFormatProvider",
            "IFormattable",
            "Index",
            "IndexOutOfRangeException",
            "InsufficientExecutionStackException",
            "InsufficientMemoryException",
            "Int128",
            "Int16",
            "Int32",
            "Int64",
            "IntPtr",
            "InvalidCastException",
            "InvalidOperationException",
            "InvalidProgramException",
            "InvalidTimeZoneException",
            "ISpanFormattable",
            "LoaderOptimization",
            "LoaderOptimizationAttribute",
            "LocalDataStoreSlot",
            "MarshalByRefObject",
            "Math",
            "MathF",
            "MemberAccessException",
            "MemoryExtensions",
            "MethodAccessException",
            "MidpointRounding",
            "MissingFieldException",
            "MissingMemberException",
            "MissingMethodException",
            "ModuleHandle",
            "MTAThreadAttribute",
            "MulticastDelegate",
            "MulticastNotSupportedException",
            "NonSerializedAttribute",
            "NotFiniteNumberException",
            "NotImplementedException",
            "NotSupportedException",
            "Nullable",
            "NullReferenceException",
            "Object",
            "ObjectDisposedException",
            "ObsoleteAttribute",
            "OperatingSystem",
            "OperationCanceledException",
            "OrdinalComparer",
            "OutOfMemoryException",
            "OverflowException",
            "ParamArrayAttribute",
            "PlatformID",
            "PlatformNotSupportedException",
            "Random",
            "Range",
            "RankException",
            "ResolveEventArgs",
            "ResolveEventHandler",
            "RuntimeArgumentHandle",
            "RuntimeFieldHandle",
            "RuntimeMethodHandle",
            "RuntimeTypeHandle",
            "SByte",
            "SerializableAttribute",
            "Single",
            "StackOverflowException",
            "STAThreadAttribute",
            "String",
            "StringComparer",
            "StringComparison",
            "StringNormalizationExtensions",
            "StringSplitOptions",
            "SystemException",
            "ThreadStaticAttribute",
            "TimeOnly",
            "TimeoutException",
            "TimeSpan",
            "TimeZone",
            "TimeZoneInfo",
            "TimeZoneNotFoundException",
            "Tuple",
            "TupleExtensions",
            "Type",
            "TypeAccessException",
            "TypeCode",
            "TypedReference",
            "TypeInitializationException",
            "TypeLoadException",
            "TypeUnloadedException",
            "UInt128",
            "UInt16",
            "UInt32",
            "UInt64",
            "UIntPtr",
            "UnauthorizedAccessException",
            "UnhandledExceptionEventArgs",
            "UnhandledExceptionEventHandler",
            "UnitySerializationHolder",
            "ValueTuple",
            "ValueType",
            "Version",
            "Void",
            "WeakReference",
            //"".GetType().Assembly.GetTypes() | ? {$_.IsPublic -eq $true -and $_.IsGenericType -eq $false -and $_.Namespace -eq "System"} | Select-Object -expand Name | Sort | Set-Clipboard
        };
    });
    public HashSet<string> ReservedNames => _reservedNames.Value;
}
