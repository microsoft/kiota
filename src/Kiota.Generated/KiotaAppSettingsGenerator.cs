using System;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

[Generator]
public class KiotaAppSettingsGenerator : ISourceGenerator
{

    private string findFileAndRead(string directory, string name, int maxDepth)
    {
        try
        {
            using var reader = new StreamReader(PathHelper.Join(directory, name), Encoding.UTF8);
            return reader.ReadToEnd();
        }
        catch (FileNotFoundException e)
        {
            if (maxDepth > 0)
                return findFileAndRead(PathHelper.Join(directory, ".."), name, maxDepth - 1);
            else
                throw e;
        }
    }
    public void Execute(GeneratorExecutionContext context)
    {
        var mainSyntaxTree = context.Compilation.SyntaxTrees
                                .First(static x => x.HasCompilationUnitRoot);

        var directory = Path.GetDirectoryName(mainSyntaxTree.FilePath);

        var text = findFileAndRead(directory, "appsettings.json", 5);
        byte[] content = Encoding.UTF8.GetBytes(text);
        var bytes = "new byte[] { " + string.Join(", ", content) + "}";

        string source = $@"// <auto-generated/>
namespace Kiota.Generated
{{
    public static class KiotaAppSettings
    {{
        public static byte[] Default()
        {{
            return {bytes};
        }}
    }}
}}
";

        // Add the source code to the compilation
        context.AddSource($"KiotaAppSettings.g.cs", source);
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this one
    }
}
