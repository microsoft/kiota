# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  paths:
    exclude:
      [
        "abstractions/**",
        "authentication/**",
        "serialization/**",
        "http/**",
        "**.md",
        ".vscode/**",
        "**.svg",
      ]
  tags:
    include:
      - v*

pool:
  name: Azure Pipelines
  vmImage: windows-latest

variables:
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  ProductBinPath: '$(Build.SourcesDirectory)\src\kiota\bin\$(BuildConfiguration)'

stages:
  - stage: build
    jobs:
      - job: build
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET 2" # needed for ESRP signing
            inputs:
              version: 2.x

          - task: UseDotNet@2
            displayName: "Use .NET 7"
            inputs:
              version: 7.x

          - task: PoliCheck@2
            displayName: 'Run PoliCheck "/src"'
            inputs:
              inputType: CmdLine
              cmdLineArgs: '/F:$(Build.SourcesDirectory)/src /T:9 /Sev:"1|2" /PE:2 /O:poli_result_src.xml'

          - task: PoliCheck@2
            displayName: 'Run PoliCheck "/tests"'
            inputs:
              inputType: CmdLine
              cmdLineArgs: '/F:$(Build.SourcesDirectory)/tests /T:9 /Sev:"1|2" /PE:2 /O:poli_result_test.xml'

          # Install the nuget tool.
          - task: NuGetToolInstaller@0
            displayName: "Use NuGet >=6.1.0"
            inputs:
              versionSpec: ">=6.1.0"
              checkLatest: true

          - pwsh: |
              dotnet workload restore
              dotnet workload install wasm-tools
            displayName: "Restore workloads"
            workingDirectory: $(Build.SourcesDirectory)

          # Build the Product project
          - task: DotNetCoreCLI@2
            displayName: "build"
            inputs:
              projects: '$(Build.SourcesDirectory)\kiota.sln'
              arguments: "--configuration $(BuildConfiguration) --no-incremental"

          # Run the Unit test
          - task: DotNetCoreCLI@2
            displayName: "test"
            inputs:
              command: test
              projects: '$(Build.SourcesDirectory)\kiota.sln'
              arguments: "--configuration $(BuildConfiguration) --no-build"

          # removing kiota web files before signing as they don't need to be signed
          # removing triggers to credscan
          - pwsh: |
              rm -r src\Kiota.Web\bin -ErrorAction SilentlyContinue -Verbose
              rm tests\Kiota.Web.Tests\bin\Release\net7.0\.playwright\package\ThirdPartyNotices.txt -ErrorAction SilentlyContinue -Verbose
              rm src\Kiota.Web\README.md -ErrorAction SilentlyContinue -Verbose
            workingDirectory: $(Build.SourcesDirectory)

          # CredScan
          - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
            displayName: "Run CredScan - Src"
            inputs:
              toolMajorVersion: "V2"
              scanFolder: '$(Build.SourcesDirectory)\src'
              debugMode: false

          - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
            displayName: "Run CredScan - Tests"
            inputs:
              toolMajorVersion: "V2"
              scanFolder: '$(Build.SourcesDirectory)\tests'
              debugMode: false

          - task: AntiMalware@3
            displayName: "Run MpCmdRun.exe - ProductBinPath"
            inputs:
              FileDirPath: "$(ProductBinPath)"
            enabled: false

          - task: BinSkim@4
            displayName: "Run BinSkim - Product Binaries"
            inputs:
              InputType: Basic
              AnalyzeTargetGlob: '$(ProductBinPath)\**\kiota.dll'
              AnalyzeSymPath: "$(ProductBinPath)"
              AnalyzeVerbose: true
              AnalyzeHashes: true
              AnalyzeEnvironment: true

          - task: PublishSecurityAnalysisLogs@3
            displayName: "Publish Security Analysis Logs"
            inputs:
              ArtifactName: SecurityLogs

          - task: PostAnalysis@2
            displayName: "Post Analysis"
            inputs:
              BinSkim: true
              CredScan: true
              PoliCheck: true

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            displayName: "ESRP CodeSigning"
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: src
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolSign",
                        "parameters": [
                        {
                            "parameterName": "OpusName",
                            "parameterValue": "Microsoft"
                        },
                        {
                            "parameterName": "OpusInfo",
                            "parameterValue": "http://www.microsoft.com"
                        },
                        {
                            "parameterName": "FileDigest",
                            "parameterValue": "/fd \"SHA256\""
                        },
                        {
                            "parameterName": "PageHash",
                            "parameterValue": "/NPH"
                        },
                        {
                            "parameterName": "TimeStamp",
                            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20

          # Pack
          - pwsh: dotnet pack $(Build.SourcesDirectory)/src/kiota/kiota.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
            displayName: "pack kiota"

          - pwsh: dotnet pack $(Build.SourcesDirectory)/src/Kiota.Builder/Kiota.Builder.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
            displayName: "pack kiota builder"

          # Pack
          - pwsh: nuget pack $(Build.SourcesDirectory)/src/Microsoft.OpenApi.Kiota.ApiDescription.Client/Microsoft.OpenApi.Kiota.ApiDescription.Client.nuspec -OutputDirectory $(Build.ArtifactStagingDirectory)
            displayName: "pack targets"

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            displayName: "ESRP CodeSigning Nuget Packages"
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: "$(Build.ArtifactStagingDirectory)"
              Pattern: "*.nupkg"
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetSign",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20

          - task: CopyFiles@2
            displayName: Prepare staging folder for upload
            inputs:
              targetFolder: $(Build.ArtifactStagingDirectory)/Nugets
              sourceFolder: $(Build.ArtifactStagingDirectory)
              content: "*.nupkg"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: Nugets"
            inputs:
              ArtifactName: Nugets
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/Nugets"


      - job: build_binaries
        dependsOn: []
        strategy:
          matrix:
            win-x86:
              architecture: 'win-x86'
            win-x64:
              architecture: 'win-x64'
            linux-x64:
              architecture: 'linux-x64'
            osx-x64:
              architecture: 'osx-x64'
            osx-arm64:
              architecture: 'osx-arm64'
        steps:
          - checkout: self
            clean: true
            submodules: true
          - task: UseDotNet@2
            displayName: "Use .NET 2" # needed for ESRP signing
            inputs:
              version: 2.x
          - task: UseDotNet@2
            displayName: "Use .NET 7"
            inputs:
              version: 7.x
          - pwsh: dotnet workload install ios macos maccatalyst
            condition: eq(variables['architecture'], 'osx-arm64')
          - pwsh: dotnet publish src/kiota/kiota.csproj -c Release --runtime $(architecture) -p:PublishSingleFile=true --self-contained --output $(Build.ArtifactStagingDirectory)/binaries/$(architecture)
            displayName: publish kiota as executable
          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(Build.ArtifactStagingDirectory)/binaries/$(architecture)
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolSign",
                        "parameters": [
                        {
                            "parameterName": "OpusName",
                            "parameterValue": "Microsoft"
                        },
                        {
                            "parameterName": "OpusInfo",
                            "parameterValue": "http://www.microsoft.com"
                        },
                        {
                            "parameterName": "FileDigest",
                            "parameterValue": "/fd \"SHA256\""
                        },
                        {
                            "parameterName": "PageHash",
                            "parameterValue": "/NPH"
                        },
                        {
                            "parameterName": "TimeStamp",
                            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20
          - pwsh: rm $(Build.ArtifactStagingDirectory)/binaries/$(architecture)/*.md -Verbose -Force -ErrorAction SilentlyContinue
          - task: ArchiveFiles@2
            displayName: Archive binaries
            inputs:
              rootFolderOrFile: $(Build.ArtifactStagingDirectory)/binaries/$(architecture)
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/binaries/$(architecture).zip
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: binaries"
            inputs:
              ArtifactName: Binaries
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/binaries/$(architecture).zip"


      - job: build_vscode_extension
        dependsOn: [build_binaries]
        steps:
          - checkout: self
            clean: true
            submodules: true
          - task: UseDotNet@2
            displayName: "Use .NET 2" # needed for ESRP signing
            inputs:
              version: 2.x

          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Binaries
              source: current
              targetPath: $(Build.ArtifactStagingDirectory)/Binaries
          - task: PowerShell@2
            displayName: "Get Kiota's version-number from .csproj"
            inputs:
              targetType: "inline"
              script: |
                $xml = [Xml] (Get-Content $(Build.SourcesDirectory)/src/kiota/kiota.csproj)
                $version = $xml.Project.PropertyGroup.Version
                echo $version
                Write-Host "##vso[task.setvariable variable=artifactVersion]$version"
          - pwsh: $(Build.SourcesDirectory)/scripts/update-vscode-releases.ps1 -version $(artifactVersion) -filePath $(Build.SourcesDirectory)/vscode/microsoft-kiota/package.json -binaryFolderPath $(Build.ArtifactStagingDirectory)/Binaries
          - pwsh: npm i -g @vscode/vsce
          - pwsh: npm ci
            workingDirectory: $(Build.SourcesDirectory)/vscode/microsoft-kiota
          - pwsh: vsce package
            workingDirectory: $(Build.SourcesDirectory)/vscode/microsoft-kiota
          - task: EsrpCodeSigning@1 # source https://github.com/microsoft/DevSkim/blob/b982fe9a1698d9f8852f183ba4edf4689cd08887/Pipelines/vscode/devskim-vscode-release.yml#L174
            displayName: Code Sign VSCode Plugin
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(Build.SourcesDirectory)/vscode/microsoft-kiota
              Pattern: '*.vsix'
              signConfigType: 'inlineSignParams'
              inlineOperation: |
                [
                        {
                            "KeyCode" : "CP-233016",
                            "OperationCode" : "OpcSign",
                            "Parameters" : {
                                "FileDigest" : "/fd SHA256"
                            },
                            "ToolName" : "sign",
                            "ToolVersion" : "1.0"
                        },
                        {
                            "KeyCode" : "CP-233016",
                            "OperationCode" : "OpcVerify",
                            "Parameters" : {},
                            "ToolName" : "sign",
                            "ToolVersion" : "1.0"
                        }
                    ]
              SessionTimeout: '60'
              MaxConcurrency: '50'
              MaxRetryAttempts: '5'
          - task: CopyFiles@2
            displayName: Prepare staging folder for upload
            inputs:
              targetFolder: $(Build.ArtifactStagingDirectory)/VSCode
              sourceFolder: $(Build.SourcesDirectory)/vscode/microsoft-kiota
              contents: "*.vsix"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: VSCode"
            inputs:
              ArtifactName: VSCode
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/VSCode"

  - stage: deploy
    condition: and(contains(variables['build.sourceBranch'], 'refs/tags/v'), succeeded())
    dependsOn: build
    jobs:
      - deployment: github_release
        dependsOn: []
        environment: kiota-github-releases
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
                - checkout: self
                  clean: true
                  submodules: true
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: Binaries
                    source: current
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: VSCode
                    source: current
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: Nugets
                    source: current
                - task: PowerShell@2
                  displayName: "Get Kiota's version-number from .csproj"
                  inputs:
                    targetType: "inline"
                    script: |
                      $xml = [Xml] (Get-Content $(Build.SourcesDirectory)/src/kiota/kiota.csproj)
                      $version = $xml.Project.PropertyGroup.Version
                      echo $version
                      Write-Host "##vso[task.setvariable variable=artifactVersion]$version"
                - pwsh: $(Build.SourcesDirectory)/scripts/get-release-notes.ps1 -version $(artifactVersion) -filePath $(Build.SourcesDirectory)/CHANGELOG.md
                - task: GitHubRelease@1
                  inputs:
                    gitHubConnection: 'microsoftkiota'
                    tagSource: userSpecifiedTag
                    tag: 'v$(artifactVersion)'
                    title: 'v$(artifactVersion)'
                    releaseNotesSource: inline
                    releaseNotesInline: $(releaseNotes)
                    assets: |
                      $(Pipeline.Workspace)\**\*.zip
                      $(Pipeline.Workspace)\**\*.vsix
                      $(Pipeline.Workspace)\**\*.nupkg
                    addChangeLog: false

      - deployment: deploy_kiota
        dependsOn: []
        environment: nuget-org
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: Nugets
                    source: current
                - task: DownloadPipelineArtifact@2
                  displayName: Download kiota executable from artifacts
                  inputs:
                    source: current
                - powershell: |
                    rm "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.ApiDescription.*.nupkg" -Verbose
                    rm "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.Builder.*.nupkg" -Verbose
                  displayName: remove other nupkgs to avoid duplication
                - task: NuGetCommand@2
                  displayName: "NuGet push"
                  inputs:
                    command: push
                    packagesToPush: "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.*.nupkg"
                    nuGetFeedType: external
                    publishFeedCredentials: "OpenAPI Nuget Connection"

      - deployment: deploy_targets
        dependsOn: []
        environment: nuget-org
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: Nugets
                    source: current
                - powershell: |
                    rm "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.*.nupkg" -Verbose -Exclude "*.ApiDescription.*"
                  displayName: remove other nupkgs to avoid duplication
                - task: NuGetCommand@2
                  displayName: "NuGet push"
                  inputs:
                    command: push
                    packagesToPush: "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.ApiDescription.*.nupkg"
                    nuGetFeedType: external
                    publishFeedCredentials: "OpenAPI Nuget Connection"

      - deployment: deploy_builder
        dependsOn: []
        environment: nuget-org
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: Nugets
                    source: current
                - powershell: |
                    rm "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.*.nupkg" -Verbose -Exclude "*.Builder.*"
                  displayName: remove other nupkgs to avoid duplication
                - task: NuGetCommand@2
                  displayName: "NuGet push"
                  inputs:
                    command: push
                    packagesToPush: "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Kiota.Builder.*.nupkg"
                    nuGetFeedType: external
                    publishFeedCredentials: "OpenAPI Nuget Connection"
